# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

trigger:
  branches:
    include:
      - main
      - develop
      - release-*
  paths:
    exclude:
      - .gitignore
      - .gitattributes
      - .gitmodules
      - .github/*
      - CHANGELOG.md
      - LICENSE.md
      - README.md
      - NuGet.Config
      - assets/*
      - nanoFramework.TestFramework/*

  tags:
    include:
      - v*

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

variables:
  - name: DOTNET_NOLOGO
    value: true  
  - name: nugetPackageName
    value: 'nanoFramework.CoreLibrary'
    
jobs:

##############################
- job: Build_mscorlib
  condition: >-
    and(
      not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v')),
      or(
        eq(variables['UPDATE_DEPENDENTS'], 'false'),
        eq(variables['StartReleaseCandidate'], 'true')
      )
    )

  pool:
    vmImage: 'windows-latest'

  variables:
    - group: sign-client-credentials
    - name: DOTNET_NOLOGO
      value: true  
    - name: buildPlatform
      value: 'Any CPU'  
    - name: buildConfiguration
      value: 'Release'
    - name: solution
      value: 'nanoFramework.CoreLibrary.sln'

  steps:

  - template: azure-pipelines-templates/process-pr-labels.yml@templates

  # build steps only
  - template: azure-pipelines-templates/class-lib-build-only.yml@templates  
    parameters:
      sonarCloudProject: 'nanoframework_lib-CoreLibrary'
      runUnitTests: ${{ ne(variables['processPrLabels.SKIP_UNIT_TESTS'], 'true') }}
      unitTestRunsettings: '$(System.DefaultWorkingDirectory)\.runsettings'
      skipNuGetCache: true
      buildComponentsUsePreview: true

  # rebuild CoreLibrary project to get the assembly checksum
  - task: MSBuild@1
    condition: >-
      and(
        succeeded(),
        eq(variables['StartReleaseCandidate'], false),
        not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      )
    displayName: Rebuild CoreLibrary
    inputs:
      solution: 'nanoFramework.CoreLibrary\CoreLibrary.nfproj' 
      platform: 'AnyCPU'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/p:PublicRelease=true'
      maximumCpuCount: true

  # package steps
  - template: azure-pipelines-templates/class-lib-package.yml@templates  
    parameters:
      nugetPackageName: 'nanoFramework.CoreLibrary'

  # rebuild CoreLibrary.NoReflection project to get the assembly checksum
  - task: MSBuild@1
    condition: >-
      and(
        succeeded(),
        eq(variables['StartReleaseCandidate'], false),
        not(startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
      )
    displayName: Rebuild CoreLibrary.NoReflection
    inputs:
      solution: 'nanoFramework.CoreLibrary.NoReflection\CoreLibrary.NoReflection.nfproj' 
      platform: 'AnyCPU'
      configuration: '$(buildConfiguration)'
      msbuildArguments: '/p:PublicRelease=true'
      maximumCpuCount: true

  - template: azure-pipelines-templates/class-lib-package.yml@templates  
    parameters:
      nugetPackageName: 'nanoFramework.CoreLibrary.NoReflection'
      
  - template: azure-pipelines-templates/class-lib-publish.yml@templates  

  # create or update GitHub release ON tags from release
  - task: GithubRelease@1
    condition: >-
      and(
        succeeded(),
        eq(variables['System.PullRequest.PullRequestId'], ''),
        startsWith(variables['Build.SourceBranch'], 'refs/heads/main'),
        not(contains(variables['Build.SourceBranch'], 'preview')),
        eq(variables['StartReleaseCandidate'], false)
      )
    displayName: Create/Update GitHub stable release
    inputs:
      action: edit
      gitHubConnection: 'github.com_nano-$(System.TeamProject)'
      tagSource: userSpecifiedTag
      tag: v$(MY_NUGET_VERSION)
      title: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
      releaseNotesSource: inline
      releaseNotesInline: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).<br>:package: [.NET (without Reflection)](https://www.nuget.org/packages/$(nugetPackageName).NoReflection/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
      assets: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      assetUploadMode: replace
      isPreRelease: false
      addChangeLog: false

##############################
- job: Update_Dependents
  condition: >-
    or(
      and(
        startsWith(variables['Build.SourceBranch'], 'refs/tags/v'),
        eq(variables['StartReleaseCandidate'], 'false')
      ),
      and(
        contains(variables['getCommitMessage.COMMIT_MESSAGE'], '***UPDATE_DEPENDENTS***'),
        eq(variables['StartReleaseCandidate'], 'false')
      ),
      eq(variables['UPDATE_DEPENDENTS'], 'true')
    )

  pool:
    vmImage: 'windows-latest'

  steps:
  # need this here in order to persist GitHub credentials 
  - checkout: self
    fetchDepth: 1
    persistCredentials: true

  # update dependents
  ##########################################################################################################
  # dependent libraries that include unit tests should be added to the list in nanoFramework.TestFramework #
  ##########################################################################################################
  - template: azure-pipelines-templates/update-dependents.yml@templates  
    parameters:
      packageName: '$(nugetPackageName)'
      repositoriesToUpdate: |
        nanoFramework.TestFramework
        nanoFramework.Device.OneWire
        nanoFramework.Runtime.Events
        nanoFramework.Runtime.Native
        nanoFramework.Hardware.GiantGecko
        nanoFramework.Hardware.TI
        nanoFramework.Networking.Sntp
        nanoFramework.TI.EasyLink
        nanoFramework.ResourceManager
        System.Device.Adc
        System.Device.Dac
        System.Device.I2c
        System.Device.I2c.Slave
        System.Device.Pwm
        System.Device.I2s

  # update Visual Studio extension
  - task: PowerShell@2
    displayName: Update VS extension
    inputs:
      targetType: filePath
      filePath: azure-pipelines/update-vs-extension.ps1
    env:
      GITHUB_TOKEN: $(GitHubToken)

##################################
# report build failure to Discord
- job: Report_Build_Failure

  dependsOn:
  - Build_mscorlib
  - Update_Dependents
  condition: >-
    or(
      failed('Build_mscorlib'),
      failed('Update_Dependents')
    )

  pool:
    vmImage: 'windows-latest'

  steps:

  - checkout: self
    fetchDepth: 1

  # step from template @ nf-tools repo
  # report error
  - template: azure-pipelines-templates/discord-webhook-task.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
