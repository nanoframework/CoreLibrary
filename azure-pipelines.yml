trigger:
  branches:
    include:
    - master
    - develop
    - release/*
    - refs/tags/*
  paths:
    exclude:
    - CHANGELOG.md
    - /*.md
    - .gitignore
    - appveyor.yml
  # waiting for feature to become available
  # tags:
  #   include:
  #   - v/*

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

jobs:

##############################
- job: Build_mscorlib
  condition: eq(variables['UPDATE_DEPENDENTS'], 'false')
  pool:
    vmImage: 'VS2017-Win2016'

  variables:
    solution: '**/source/*.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    nugetPackageName: 'nanoFramework.CoreLibrary'
    repoName: 'lib-CoreLibrary'

  steps:

  # step from template @ nf-tools repo

  # build steps only
  - template: azure-pipelines-templates/class-lib-build-only.yml@templates  
    parameters:
      sonarCloudProject: 'nanoframework_lib-CoreLibrary'

  # package steps
  - template: azure-pipelines-templates/class-lib-package.yml@templates  
    parameters:
      nugetPackageName: 'nanoFramework.CoreLibrary'

  - template: azure-pipelines-templates/class-lib-package.yml@templates  
    parameters:
      nugetPackageName: 'nanoFramework.CoreLibrary.NoReflection'
      
  - template: azure-pipelines-templates/class-lib-publish.yml@templates  

  # need to push the other package to NuGet because the template above can only push one package (happens on tag builds for any branch)
  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      allowPackageConflicts: true
      packagesToPush: 
        $(Build.ArtifactStagingDirectory)/nanoFramework.CoreLibrary.NoReflection.$(MY_NUGET_VERSION).nupkg
      publishFeedCredentials: 'AzureArtifacts-CoreLibrary'
    condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
    continueOnError: true
    displayName: Push "NoReflection" variant NuGet package to Azure Artifacts

  - task: NuGetCommand@2
    inputs:
      command: push
      nuGetFeedType: external
      allowPackageConflicts: true
      packagesToPush: 
        $(Build.ArtifactStagingDirectory)/nanoFramework.CoreLibrary.NoReflection.$(MY_NUGET_VERSION).nupkg
      publishFeedCredentials: 'NuGet-CoreLibrary'
    condition: and( succeeded(), ne( variables['StartReleaseCandidate'], true ) )
    continueOnError: true
    displayName: Push "NoReflection" variant NuGet package to Azure Artifacts

  # create or update GitHub release
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoframework'
      githubOwner: 'nanoframework'
      githubRepositoryName: $(repoName)
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from nanoFramework Azure Artifacts development feed</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://dev.azure.com/nanoframework/feed/_packaging?_a=package&feed=sandbox&view=overview&package=$(nugetPackageName)&protocolType=NuGet&version=$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)<br>:package: [.NET (without Reflection)](https://dev.azure.com/nanoframework/feed/_packaging?_a=package&feed=sandbox&view=overview&package=$(nugetPackageName).NoReflection&protocolType=NuGet&version=$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: $(RELEASE_DRAFT)
      githubReleasePrerelease: true
      githubReuseDraftOnly: false
      githubReuseRelease: true
      githubEditRelease: true
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    condition: and( succeeded(), not( startsWith(variables['Build.SourceBranch'], 'refs/pull') ), not( startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ) )
    displayName: Create/Update GitHub release

  # create or update GitHub release ON tags from release or master branches
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoframework'
      githubOwner: 'nanoframework'
      githubRepositoryName: $(repoName)
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).<br>:package: [.NET (without Reflection)](https://www.nuget.org/packages/$(nugetPackageName).NoReflection/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: $(RELEASE_DRAFT)
      githubReleasePrerelease: true
      githubReuseDraftOnly: false
      githubReuseRelease: true
      githubEditRelease: true
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), contains(variables['Build.SourceBranch'], 'preview') )
    displayName: Create/Update GitHub PREVIEW release 

  # create or update GitHub release ON tags from release or master branches
  - task: GitHubReleasePublish@1
    inputs:
      githubEndpoint: 'nanoframework'
      githubOwner: 'nanoframework'
      githubRepositoryName: $(repoName)
      githubTag: v$(MY_NUGET_VERSION)
      githubReleaseTitle: '$(nugetPackageName) Library v$(MY_NUGET_VERSION)'
      githubReleaseNotes: 'Check the [changelog]($(Build.Repository.Uri)/blob/$(Build.SourceBranchName)/CHANGELOG.md).<br><br><h4>Install from NuGet</h4><br>The following NuGet packages are available for download from this release:<br>:package: [.NET](https://www.nuget.org/packages/$(nugetPackageName)/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION).<br>:package: [.NET (without Reflection)](https://www.nuget.org/packages/$(nugetPackageName).NoReflection/$(MY_NUGET_VERSION)) v$(MY_NUGET_VERSION)'
      githubTargetCommitsh: $(Build.SourceVersion)
      githubReleaseDraft: false
      githubReleasePrerelease: false
      githubReuseDraftOnly: false
      githubReuseRelease: false
      githubEditRelease: false
      githubDeleteEmptyTag: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    condition: and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'), not(contains(variables['Build.SourceBranch'], 'preview') ) )
    displayName: Create/Update GitHub stable release

##############################
- job: Update_Dependencies
  condition: and( ne( variables['StartReleaseCandidate'], true ), eq(variables['UPDATE_DEPENDENTS'], true) )

  dependsOn:
  - Build_mscorlib

  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  # need this here in order to persist GitHub credentials 
  - checkout: self

  - script: |
      git config --global user.email nanoframework@outlook.com
      git config --global user.name nfbot
      git config --global core.autocrlf true
    displayName: Setup git identity

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '4.9.3'
    condition: ne( variables['StartReleaseCandidate'], true )
    displayName: 'Install specific version of NuGet'

  # update dependencies
  - task: UpdatenFDependencies@1
    inputs:
      gitHubToken: $(GitHubToken)
      repositoriesToUpdate: |
        lib-nanoFramework.Runtime.Events
        lib-nanoFramework.Runtime.Native
        lib-Windows.Devices.Adc
        lib-Windows.Devices.I2c
        lib-Windows.Devices.Pwm
        lib-Windows.Devices.Spi
        lib-System.Devices.Dac
        lib-nanoFramework.Devices.OneWire
        lib-nanoFramework.Networking.Sntp
        lib-nanoFramework.Hardware.Stm32
        lib-nanoFramework.System.Math
        lib-nanoFramework.TI.EasyLink
        lib-nanoFramework.ResourceManager
        lib-nanoFramework.System.Collections
        lib-nanoFramework.System.Text
        Json.NetMF
    condition: or( and( succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v') ), and( succeeded(), contains(variables['Build.SourceVersionMessage'], '***UPDATE_DEPENDENTS***') ), eq(variables['UPDATE_DEPENDENTS'], 'true') )
    displayName: Update dependent class libs

##################################
# report build failure to Discord
- job: Report_Build_Failure
  
  dependsOn:
  - Build_mscorlib
  - Update_Dependencies
  condition: or( failed('Build_mscorlib'), failed('Build_mscorlib_no_reflection'), failed('Update_Dependencies'))

  pool:
    vmImage: 'VS2017-Win2016'

  steps:
  
  - checkout: self

  # step from template @ nf-tools repo
  # report error
  - template: azure-pipelines-templates/discord-webhook-task.yml@templates  
    parameters:
      status: 'failure'
      webhookUrl: '$(DiscordWebhook)'
      message: ''
